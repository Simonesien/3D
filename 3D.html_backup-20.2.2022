<!doctype html>
<html>
<head>
    <style>*{margin:0;padding:0;}body{display:flex;justify-content:center;align-items:center;}</style>
</head>
<body>
  <canvas id="canvas_1"></canvas>
  <script>

function renderCube2d(){
    // wenn y-achse gedreht wird, dreht er sich nicht mehr um die default x-achse (wenn x gedrückt ist), sondern um die gedrehte x-achsez
    // clipping
    //rotation um camera bei bewegung der !!maus!!
    // fov
    // einfach den ganzen code rund um das *canvas.height/2, +1, height*-1, usw. überdenken
    // warum spawnt man kurz vor dem würfel? ja, schön, aber überdenken, warum.
    //texture and color
    //backface culling
    // bei direction maximal 1 PI, sonst kaputt -> einbauen!
canvas.beginPath();
for (r = 0; r < cube3d.length; r++){
canvas.clearRect(0, 0, canvas_element_1.width, canvas_element_1.height);
x_1 = Math.cos(directionY)*(cube3d[r][0][0]-cameraX)-Math.sin(directionY)*(cube3d[r][0][2]-cameraZ);
z_1 = (cube3d[r][0][1]-cameraY+fovx)*Math.sin(directionX)+(Math.sin(directionY)*(cube3d[r][0][0]-cameraX+fovx)+Math.cos(directionY)*(cube3d[r][0][2]-cameraZ+fovx))*Math.cos(directionX);
y_1 = (cube3d[r][0][1]-cameraY)*Math.cos(directionX)-(Math.sin(directionY)*(cube3d[r][0][0]-cameraX)+Math.cos(directionY)*(cube3d[r][0][2]-cameraZ))*Math.sin(directionX);

x_2 = Math.cos(directionY)*(cube3d[r][1][0]-cameraX)-Math.sin(directionY)*(cube3d[r][1][2]-cameraZ);
z_2 = (cube3d[r][1][1]-cameraY+fovx)*Math.sin(directionX)+(Math.sin(directionY)*(cube3d[r][1][0]-cameraX+fovx)+Math.cos(directionY)*(cube3d[r][1][2]-cameraZ+fovx))*Math.cos(directionX);
y_2 = (cube3d[r][1][1]-cameraY)*Math.cos(directionX)-(Math.sin(directionY)*(cube3d[r][1][0]-cameraX)+Math.cos(directionY)*(cube3d[r][1][2]-cameraZ))*Math.sin(directionX);

x_3 = Math.cos(directionY)*(cube3d[r][2][0]-cameraX)-Math.sin(directionY)*(cube3d[r][2][2]-cameraZ);
z_3 = (cube3d[r][2][1]-cameraY+fovx)*Math.sin(directionX)+(Math.sin(directionY)*(cube3d[r][2][0]-cameraX+fovx)+Math.cos(directionY)*(cube3d[r][2][2]-cameraZ+fovx))*Math.cos(directionX);
y_3 = (cube3d[r][2][1]-cameraY)*Math.cos(directionX)-(Math.sin(directionY)*(cube3d[r][2][0]-cameraX)+Math.cos(directionY)*(cube3d[r][2][2]-cameraZ))*Math.sin(directionX);

triangles = [];
    
function clip1(triangle){
    triangles.push([[triangle[0][0], triangle[0][1], triangle[0][2]], [triangle[0][0]+(triangle[1][0]-triangle[0][0])*((clipNear-triangle[0][2])/(triangle[1][2]-triangle[0][2])), triangle[0][1]+(triangle[1][1]-triangle[0][1])*((clipNear-triangle[0][2])/(triangle[1][2]-triangle[0][2])), clipNear], [triangle[0][0]+(triangle[2][0]-triangle[0][0])*((clipNear-triangle[0][2])/(triangle[2][2]-triangle[0][2])), triangle[0][1]+(triangle[2][1]-triangle[0][1])*((clipNear-triangle[0][2])/(triangle[2][2]-triangle[0][2])), clipNear]]);
}
    
function clip2(triangle){
    point_3 = [triangle[1][0]+(triangle[2][0]-triangle[1][0])*((clipNear-triangle[1][2])/(triangle[2][2]-triangle[1][2])), triangle[1][1]+(triangle[2][1]-triangle[1][1])*((clipNear-triangle[1][2])/(triangle[2][2]-triangle[1][2])), clipNear];
    point_4 = [triangle[0][0]+(triangle[2][0]-triangle[0][0])*((clipNear-triangle[0][2])/(triangle[2][2]-triangle[0][2])), triangle[0][1]+(triangle[2][1]-triangle[0][1])*((clipNear-triangle[0][2])/(triangle[2][2]-triangle[0][2])), clipNear];
    triangles.push([[triangle[0][0], triangle[0][1], triangle[0][2]], point_4, [triangle[1][0], triangle[1][1], triangle[1][2]]]);
    triangles.push([[triangle[1][0], triangle[1][1], triangle[1][2]], point_4, point_3]);
}
    
//    clip2: 1. drinnen, 2. drinnen, 3. draußen
//    clip1: 1. drinnen, 2. draußen, 3. draußen
if (z_1 >= clipNear && z_2 >= clipNear && z_3 >= clipNear){triangles.push([[x_1, y_1, z_1], [x_2, y_2, z_2], [x_3, y_3, z_3]]);}
else if (z_1 > clipNear && z_2 > clipNear){clip2([[x_1, y_1, z_1], [x_2, y_2, z_2], [x_3, y_3, z_3]]);}
else if (z_1 > clipNear && z_3 > clipNear){clip2([[x_1, y_1, z_1], [x_3, y_3, z_3], [x_2, y_2, z_2]]);}
else if (z_2 > clipNear && z_3 > clipNear){clip2([[x_2, y_2, z_2], [x_3, y_3, z_3], [x_1, y_1, z_1]]);}
else if (z_1 > clipNear){clip1([[x_1, y_1, z_1], [x_2, y_2, z_2], [x_3, y_3, z_3]]);}
else if (z_2 > clipNear){clip1([[x_2, y_2, z_2], [x_1, y_1, z_1], [x_3, y_3, z_3]]);}
else if (z_3 > clipNear){clip1([[x_3, y_3, z_3], [x_1, y_1, z_1], [x_2, y_2, z_2]]);}

for (v = 0; v < triangles.length; v++){
canvas.moveTo(((triangles[v][0][0]/triangles[v][0][2])+1)*(canvas_element_1.width/2), ((triangles[v][0][1]/triangles[v][0][2])*-1+1)*(canvas_element_1.height/2));
canvas.lineTo(((triangles[v][1][0]/triangles[v][1][2])+1)*(canvas_element_1.width/2), ((triangles[v][1][1]/triangles[v][1][2])*-1+1)*(canvas_element_1.height/2));
    
canvas.moveTo(((triangles[v][1][0]/triangles[v][1][2])+1)*(canvas_element_1.width/2), ((triangles[v][1][1]/triangles[v][1][2])*-1+1)*(canvas_element_1.height/2));
canvas.lineTo(((triangles[v][2][0]/triangles[v][2][2])+1)*(canvas_element_1.width/2), ((triangles[v][2][1]/triangles[v][2][2])*-1+1)*(canvas_element_1.height/2));

canvas.moveTo(((triangles[v][2][0]/triangles[v][2][2])+1)*(canvas_element_1.width/2), ((triangles[v][2][1]/triangles[v][2][2])*-1+1)*(canvas_element_1.height/2));
canvas.lineTo(((triangles[v][0][0]/triangles[v][0][2])+1)*(canvas_element_1.width/2), ((triangles[v][0][1]/triangles[v][0][2])*-1+1)*(canvas_element_1.height/2));
}
}

canvas.stroke();
}
      
function rotate(v, radians){
    if (v == "Z"){
for (w = 0; w < cube3d.length; w++){
    for (t = 0; t < 3; t++){
    x = cube3d[w][t][0];
    y = cube3d[w][t][1];
cube3d[w][t][0] = Math.cos(radians)*x + Math.sin(radians)*y;
cube3d[w][t][1] = Math.cos(radians)*y - Math.sin(radians)*x;
    }}}

if (v == "X"){
for (w = 0; w < cube3d.length; w++){
    for (t = 0; t < 3; t++){
    y = cube3d[w][t][1];
    z = cube3d[w][t][2];
cube3d[w][t][1] = y * Math.cos(radians) - z * Math.sin(radians);
cube3d[w][t][2] = y * Math.sin(radians) + z * Math.cos(radians);
}}
}

if (v == "Y"){
for (w = 0; w < cube3d.length; w++){
    for (t = 0; t < 3; t++){
    x = cube3d[w][t][0];
    z = cube3d[w][t][2];
cube3d[w][t][0] = Math.cos(radians)*x - Math.sin(radians)*z;
cube3d[w][t][2] = Math.sin(radians)*x + Math.cos(radians)*z;
}}}

}      

const canvas_element_1 = document.getElementById("canvas_1");
canvas_element_1.width = window.innerHeight;
canvas_element_1.height = window.innerHeight;
const canvas = canvas_element_1.getContext('2d');

cube3d = [
    [[-0.5,-0.5,0.5],[0.5,-0.5,0.5],[0.5,0.5,0.5]],
    [[-0.5,-0.5,0.5],[0.5,0.5,0.5],[-0.5,0.5,0.5]],
    [[0.5,-0.5,0.5],[0.5,-0.5,-0.5],[0.5,0.5,-0.5]],
    [[0.5,-0.5,0.5],[0.5,0.5,-0.5],[0.5,0.5,0.5]],
    [[0.5,-0.5,-0.5],[-0.5,-0.5,-0.5],[-0.5,0.5,-0.5]],
    [[0.5,-0.5,-0.5],[-0.5,0.5,-0.5],[0.5,0.5,-0.5]],
    [[-0.5,-0.5,-0.5],[-0.5,-0.5,0.5],[-0.5,0.5,0.5]],
    [[-0.5,-0.5,-0.5],[-0.5,0.5,0.5],[-0.5,0.5,-0.5]],
    [[-0.5,0.5,0.5],[0.5,0.5,0.5],[0.5,0.5,-0.5]],
    [[-0.5,0.5,0.5],[0.5,0.5,-0.5],[-0.5,0.5,-0.5]],
    [[0.5,-0.5,0.5],[-0.5,-0.5,-0.5],[0.5,-0.5,-0.5]],
    [[0.5,-0.5,0.5],[-0.5,-0.5, 0.5],[-0.5,-0.5,-0.5]]
];

fovy = 1;
fovx = 1;
directionX = 0;
directionY = 0;
cameraX = 0;
cameraY = 0;
cameraZ = 0;
clipNear = 0;
renderCube2d();

radiansZ = 0;
radiansY = 0;
radiansX = 0;
minus = -1;

document.onkeydown = function(){
    if (event.key == "x"){
        if (minus != 1){rotate("X", 0.01);}
        else {rotate("X", -0.01);}
    }
    if (event.key == "y"){
        if (minus != 1){rotate("Y", 0.01);}
        else {rotate("Y", -0.01);}
    }
    if (event.key == "z"){
        if (minus != 1){rotate("Z", 0.01);}
        else {rotate("Z", -0.01);}
    }
    if (event.key == "-"){
        minus = minus*-1;
    }
    if (event.key == " "){
        cameraY = cameraY + 0.1;
    }
    if (event.key == "Shift"){
        cameraY = cameraY - 0.1;
    }
    if (event.key == "w"){
        cameraZ = cameraZ + 0.1;
    }
    if (event.key == "s"){
        cameraZ = cameraZ - 0.1;
    }
    if (event.key == "d"){
        cameraX = cameraX + 0.1;
    }
    if (event.key == "a"){
        cameraX = cameraX - 0.1;
    }
    if (event.key == "ArrowUp"){
       directionX = directionX + 0.1;
    }
    if (event.key == "ArrowDown"){
       directionX = directionX - 0.1;
    }
    if (event.key == "ArrowRight"){
       directionY = directionY + 0.1;
    }
    if (event.key == "ArrowLeft"){
       directionY = directionY - 0.1;
    }
    if (event.key == "i"){
       fovx = fovx + 0.01;console.log(fovx);
       fovy = fovy + 0.01;
    }
    if (event.key == "o"){
       fovx = fovx - 0.01;console.log(fovx);
       fovy = fovy - 0.01;
    }
    if (event.key == "c"){
        clipNear = clipNear + 0.2;console.log(clipNear);
    }
    if (event.key == "v"){
        clipNear = clipNear - 0.2;console.log(clipNear);
    }
    renderCube2d();}
  </script>
</body>
</html>
