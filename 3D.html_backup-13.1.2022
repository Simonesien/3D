<!doctype html>
<html>
<head>
    <style>*{margin:0;padding:0;}body{display:flex;justify-content:center;align-items:center;}</style>
</head>
<body>
  <canvas id="canvas_1"></canvas>
  <script>

function renderCube2d(){
    // denken warum height*-1 - also klar, funktioniert, aber warum? an mein zukünftiges Ich: sorry, wenn ich zu blöd war ;|
    // man könnte auch statt canvas.height/width / 2 die 2 durch eine variable ersetzen, die die größte Differenz im cube3d array beschreibt, die zwischen x objekten oder y objekten vorliegt (es muss die größte überhaupt genommen werden, nicht einzeln, sonst ist es verzerrt)
    // problem lösen bei perspektivischer ansicht -> z muss größer als 1 sein, sonst ist alles kaputt, dann rotiert aber alles scheiße -> lösung herausfinden! // clipping ist dein freund, simon :)
    //generell schwachstellen im Code überarbeiten (z. B. resetCube3d(); , auch wenn mir gerade nichts besseres einfällt :( ) // Ha, siehe unten, vielleicht eine lösung gefunden :)
    // wenn y-achse gedreht wird, dreht er sich nicht mehr um die default x-achse (wenn x gedrückt ist), sondern um die gedrehte x-achsez
    // clipping
    //rotation um camera bei bewegung der !!maus!!
    // fov
canvas.beginPath();
for (r = 0; r < cube3d.length; r++){ // vorher r < 4
    
    
    //camera verschiebung mit looking direction
    // funktioniert auf den ersten blick --- bin sehr überrascht xD
     /*   // nein, leider nicht :|, auch noch überarbeiten :((((((((
x = cameraX;           // das nach unten in den teil der camera tasten schieben
y = cameraY;
z = cameraZ;

cameraX = Math.cos(directionY)*x - Math.sin(directionY)*z;
cameraZ = Math.sin(directionY)*x + Math.cos(directionY)*z;
cameraY = y * Math.cos(directionX) - z * Math.sin(directionX);
cameraZ = y * Math.sin(directionX) + z * Math.cos(directionX);
/*
canvas.moveTo(((cube3d[r][0][0]-cameraX)/(cube3d[r][0][2]+1-cameraZ)+1)*(canvas_element_1.width/2), ((cube3d[r][0][1]-cameraY)/(cube3d[r][0][2]+1-cameraZ)*-1+1)*(canvas_element_1.height/2));
canvas.lineTo(((cube3d[r][1][0]-cameraX)/(cube3d[r][1][2]+1-cameraZ)+1)*(canvas_element_1.width/2), ((cube3d[r][1][1]-cameraY)/(cube3d[r][1][2]+1-cameraZ)*-1+1)*(canvas_element_1.height/2));
    
canvas.moveTo(((cube3d[r][1][0]-cameraX)/(cube3d[r][1][2]+1-cameraZ)+1)*(canvas_element_1.width/2), ((cube3d[r][1][1]-cameraY)/(cube3d[r][1][2]+1-cameraZ)*-1+1)*(canvas_element_1.height/2));
canvas.lineTo(((cube3d[r][2][0]-cameraX)/(cube3d[r][2][2]+1-cameraZ)+1)*(canvas_element_1.width/2), ((cube3d[r][2][1]-cameraY)/(cube3d[r][2][2]+1-cameraZ)*-1+1)*(canvas_element_1.height/2));
    
canvas.moveTo(((cube3d[r][2][0]-cameraX)/(cube3d[r][2][2]+1-cameraZ)+1)*(canvas_element_1.width/2), ((cube3d[r][2][1]-cameraY)/(cube3d[r][2][2]+1-cameraZ)*-1+1)*(canvas_element_1.height/2));
canvas.lineTo(((cube3d[r][0][0]-cameraX)/(cube3d[r][0][2]+1-cameraZ)+1)*(canvas_element_1.width/2), ((cube3d[r][0][1]-cameraY)/(cube3d[r][0][2]+1-cameraZ)*-1+1)*(canvas_element_1.height/2));
*/

/**/
canvas.moveTo(((Math.cos(directionY)*(cube3d[r][0][0]-cameraX)-Math.sin(directionY)*(cube3d[r][0][2]-cameraZ))/((cube3d[r][0][1]-cameraY+fovx)*Math.sin(directionX)+(Math.sin(directionY)*(cube3d[r][0][0]-cameraX+fovx)+Math.cos(directionY)*(cube3d[r][0][2]-cameraZ+fovx))*Math.cos(directionX))+1)*(canvas_element_1.width/2), (((cube3d[r][0][1]-cameraY)*Math.cos(directionX)-(Math.sin(directionY)*(cube3d[r][0][0]-cameraX)+Math.cos(directionY)*(cube3d[r][0][2]-cameraZ))*Math.sin(directionX))/((cube3d[r][0][1]-cameraY+fovy)*Math.sin(directionX)+(Math.sin(directionY)*(cube3d[r][0][0]-cameraX+fovy)+Math.cos(directionY)*(cube3d[r][0][2]-cameraZ+fovy))*Math.cos(directionX))*-1+1)*(canvas_element_1.height/2));
canvas.lineTo(((Math.cos(directionY)*(cube3d[r][1][0]-cameraX)-Math.sin(directionY)*(cube3d[r][1][2]-cameraZ))/((cube3d[r][1][1]-cameraY+fovx)*Math.sin(directionX)+(Math.sin(directionY)*(cube3d[r][1][0]-cameraX+fovx)+Math.cos(directionY)*(cube3d[r][1][2]-cameraZ+fovx))*Math.cos(directionX))+1)*(canvas_element_1.width/2), (((cube3d[r][1][1]-cameraY)*Math.cos(directionX)-(Math.sin(directionY)*(cube3d[r][1][0]-cameraX)+Math.cos(directionY)*(cube3d[r][1][2]-cameraZ))*Math.sin(directionX))/((cube3d[r][1][1]-cameraY+fovy)*Math.sin(directionX)+(Math.sin(directionY)*(cube3d[r][1][0]-cameraX+fovy)+Math.cos(directionY)*(cube3d[r][1][2]-cameraZ+fovy))*Math.cos(directionX))*-1+1)*(canvas_element_1.height/2));

canvas.moveTo(((Math.cos(directionY)*(cube3d[r][1][0]-cameraX)-Math.sin(directionY)*(cube3d[r][1][2]-cameraZ))/((cube3d[r][1][1]-cameraY+fovx)*Math.sin(directionX)+(Math.sin(directionY)*(cube3d[r][1][0]-cameraX+fovx)+Math.cos(directionY)*(cube3d[r][1][2]-cameraZ+fovx))*Math.cos(directionX))+1)*(canvas_element_1.width/2), (((cube3d[r][1][1]-cameraY)*Math.cos(directionX)-(Math.sin(directionY)*(cube3d[r][1][0]-cameraX)+Math.cos(directionY)*(cube3d[r][1][2]-cameraZ))*Math.sin(directionX))/((cube3d[r][1][1]-cameraY+fovy)*Math.sin(directionX)+(Math.sin(directionY)*(cube3d[r][1][0]-cameraX+fovy)+Math.cos(directionY)*(cube3d[r][1][2]-cameraZ+fovy))*Math.cos(directionX))*-1+1)*(canvas_element_1.height/2));
canvas.lineTo(((Math.cos(directionY)*(cube3d[r][2][0]-cameraX)-Math.sin(directionY)*(cube3d[r][2][2]-cameraZ))/((cube3d[r][2][1]-cameraY+fovx)*Math.sin(directionX)+(Math.sin(directionY)*(cube3d[r][2][0]-cameraX+fovx)+Math.cos(directionY)*(cube3d[r][2][2]-cameraZ+fovx))*Math.cos(directionX))+1)*(canvas_element_1.width/2), (((cube3d[r][2][1]-cameraY)*Math.cos(directionX)-(Math.sin(directionY)*(cube3d[r][2][0]-cameraX)+Math.cos(directionY)*(cube3d[r][2][2]-cameraZ))*Math.sin(directionX))/((cube3d[r][2][1]-cameraY+fovy)*Math.sin(directionX)+(Math.sin(directionY)*(cube3d[r][2][0]-cameraX+fovy)+Math.cos(directionY)*(cube3d[r][2][2]-cameraZ+fovy))*Math.cos(directionX))*-1+1)*(canvas_element_1.height/2));

canvas.moveTo(((Math.cos(directionY)*(cube3d[r][2][0]-cameraX)-Math.sin(directionY)*(cube3d[r][2][2]-cameraZ))/((cube3d[r][2][1]-cameraY+fovx)*Math.sin(directionX)+(Math.sin(directionY)*(cube3d[r][2][0]-cameraX+fovx)+Math.cos(directionY)*(cube3d[r][2][2]-cameraZ+fovx))*Math.cos(directionX))+1)*(canvas_element_1.width/2), (((cube3d[r][2][1]-cameraY)*Math.cos(directionX)-(Math.sin(directionY)*(cube3d[r][2][0]-cameraX)+Math.cos(directionY)*(cube3d[r][2][2]-cameraZ))*Math.sin(directionX))/((cube3d[r][2][1]-cameraY+fovy)*Math.sin(directionX)+(Math.sin(directionY)*(cube3d[r][2][0]-cameraX+fovy)+Math.cos(directionY)*(cube3d[r][2][2]-cameraZ+fovy))*Math.cos(directionX))*-1+1)*(canvas_element_1.height/2));
canvas.lineTo(((Math.cos(directionY)*(cube3d[r][0][0]-cameraX)-Math.sin(directionY)*(cube3d[r][0][2]-cameraZ))/((cube3d[r][0][1]-cameraY+fovx)*Math.sin(directionX)+(Math.sin(directionY)*(cube3d[r][0][0]-cameraX+fovx)+Math.cos(directionY)*(cube3d[r][0][2]-cameraZ+fovx))*Math.cos(directionX))+1)*(canvas_element_1.width/2), (((cube3d[r][0][1]-cameraY)*Math.cos(directionX)-(Math.sin(directionY)*(cube3d[r][0][0]-cameraX)+Math.cos(directionY)*(cube3d[r][0][2]-cameraZ))*Math.sin(directionX))/((cube3d[r][0][1]-cameraY+fovy)*Math.sin(directionX)+(Math.sin(directionY)*(cube3d[r][0][0]-cameraX+fovy)+Math.cos(directionY)*(cube3d[r][0][2]-cameraZ+fovy))*Math.cos(directionX))*-1+1)*(canvas_element_1.height/2));
/*
cameraX = x;
cameraY = y;
cameraZ = z;
//0110110110
    // cube3d[w][t][0] = (Math.cos(directionY)*(cube3d[r][][0]-cameraX)-Math.sin(directionY)*(cube3d[r][][2]-cameraZ));
    // cube3d[w][t][2] = (Math.sin(directionY)*(cube3d[r][][0]-cameraX)+Math.cos(directionY)*(cube3d[r][][2]-cameraZ));
    /*
canvas.moveTo((cube3d[r][0]-cameraX+1)*(canvas_element_1.width/2), (cube3d[r][1]-cameraY*-1+1)*(canvas_element_1.height/2));
canvas.lineTo((cube3d[(r+1)%4][0]-cameraX+1)*(canvas_element_1.width/2), (cube3d[(r+1)%4][1]-cameraY*-1+1)*(canvas_element_1.height/2));

canvas.moveTo((cube3d[r+4][0]-cameraX+1)*(canvas_element_1.width/2), (cube3d[r+4][1]-cameraY*-1+1)*(canvas_element_1.height/2));
canvas.lineTo((cube3d[((r+1)%4)+4][0]-cameraX+1)*(canvas_element_1.width/2), (cube3d[((r+1)%4)+4][1]-cameraY*-1+1)*(canvas_element_1.height/2));

canvas.moveTo((cube3d[r][0]-cameraX+1)*(canvas_element_1.width/2), (cube3d[r][1]-cameraY*-1+1)*(canvas_element_1.height/2));
canvas.lineTo((cube3d[r+4][0]-cameraX+1)*(canvas_element_1.width/2), (cube3d[r+4][1]-cameraY*-1+1)*(canvas_element_1.height/2));
  *//*
canvas.moveTo((cube3d[r][0]-cameraX/cube3d[r][2]-cameraZ+1)*(canvas_element_1.width/2), (cube3d[r][1]-cameraY/cube3d[r][2]-cameraZ*-1+1)*(canvas_element_1.height/2));
canvas.lineTo((cube3d[(r+1)%4][0]-cameraX/cube3d[(r+1)%4][2]-cameraZ+1)*(canvas_element_1.width/2), (cube3d[(r+1)%4][1]-cameraY/cube3d[(r+1)%4][2]-cameraZ*-1+1)*(canvas_element_1.height/2));

canvas.moveTo((cube3d[r+4][0]-cameraX/(cube3d[r+4][2]-cameraZ+1)+1)*(canvas_element_1.width/2), (cube3d[r+4][1]-cameraY/(cube3d[r+4][2]-cameraZ+1)*-1+1)*(canvas_element_1.height/2));
canvas.lineTo((cube3d[((r+1)%4)+4][0]-cameraX/(cube3d[((r+1)%4)+4][2]-cameraZ+1)+1)*(canvas_element_1.width/2), (cube3d[((r+1)%4)+4][1]-cameraY/(cube3d[((r+1)%4)+4][2]-cameraZ+1)*-1+1)*(canvas_element_1.height/2));

canvas.moveTo((cube3d[r][0]-cameraX/(cube3d[r][2]-cameraZ+1)+1)*(canvas_element_1.width/2), (cube3d[r][1]-cameraY/(cube3d[r][2]-cameraZ+1)*-1+1)*(canvas_element_1.height/2));
canvas.lineTo((cube3d[r+4][0]-cameraX/(cube3d[r+4][2]-cameraZ+1)+1)*(canvas_element_1.width/2), (cube3d[r+4][1]-cameraY/(cube3d[r+4][2]-cameraZ+1)*-1+1)*(canvas_element_1.height/2));*/
    
    
           /*  // backup ohne cameraX/Y/Z -- perspective
canvas.moveTo((cube3d[r][0]/cube3d[r][2]+1)*(canvas_element_1.width/2), (cube3d[r][1]/cube3d[r][2]*-1+1)*(canvas_element_1.height/2));
canvas.lineTo((cube3d[(r+1)%4][0]/cube3d[(r+1)%4][2]+1)*(canvas_element_1.width/2), (cube3d[(r+1)%4][1]/cube3d[(r+1)%4][2]*-1+1)*(canvas_element_1.height/2));

canvas.moveTo((cube3d[r+4][0]/(cube3d[r+4][2]+1)+1)*(canvas_element_1.width/2), (cube3d[r+4][1]/(cube3d[r+4][2]+1)*-1+1)*(canvas_element_1.height/2));
canvas.lineTo((cube3d[((r+1)%4)+4][0]/(cube3d[((r+1)%4)+4][2]+1)+1)*(canvas_element_1.width/2), (cube3d[((r+1)%4)+4][1]/(cube3d[((r+1)%4)+4][2]+1)*-1+1)*(canvas_element_1.height/2));

canvas.moveTo((cube3d[r][0]/(cube3d[r][2]+1)+1)*(canvas_element_1.width/2), (cube3d[r][1]/(cube3d[r][2]+1)*-1+1)*(canvas_element_1.height/2));
canvas.lineTo((cube3d[r+4][0]/(cube3d[r+4][2]+1)+1)*(canvas_element_1.width/2), (cube3d[r+4][1]/(cube3d[r+4][2]+1)*-1+1)*(canvas_element_1.height/2));*/
}

canvas.stroke();
}
      
      
      
      
      
      
function rotate(v, radians){
    if (v == "Z"){
for (w = 0; w < cube3d.length; w++){
    for (t = 0; t < 3; t++){
    x = cube3d[w][t][0];
    y = cube3d[w][t][1];
cube3d[w][t][0] = Math.cos(radians)*x + Math.sin(radians)*y;
cube3d[w][t][1] = Math.cos(radians)*y - Math.sin(radians)*x;
canvas.clearRect(0, 0, canvas_element_1.width, canvas_element_1.height);
    }}}

if (v == "X"){
for (w = 0; w < cube3d.length; w++){
    for (t = 0; t < 3; t++){
    y = cube3d[w][t][1];
    z = cube3d[w][t][2];
cube3d[w][t][1] = y * Math.cos(radians) - z * Math.sin(radians);
cube3d[w][t][2] = y * Math.sin(radians) + z * Math.cos(radians);
canvas.clearRect(0, 0, canvas_element_1.width, canvas_element_1.height);}}
}

if (v == "Y"){
for (w = 0; w < cube3d.length; w++){
    for (t = 0; t < 3; t++){
    x = cube3d[w][t][0];
    z = cube3d[w][t][2];
cube3d[w][t][0] = Math.cos(radians)*x - Math.sin(radians)*z;
cube3d[w][t][2] = Math.sin(radians)*x + Math.cos(radians)*z;
canvas.clearRect(0, 0, canvas_element_1.width, canvas_element_1.height);}}}

}      







/*
function rotate(v, radians){
    if (v == "Z"){
for (w = 0; w < cube3d.length; w++){
    x = cube3d[w][0];
    y = cube3d[w][1];
cube3d[w][0] = Math.cos(radians)*x + Math.sin(radians)*y;
cube3d[w][1] = Math.cos(radians)*y -  Math.sin(radians)*x;
canvas.clearRect(0, 0, canvas_element_1.width, canvas_element_1.height);}}
    
if (v == "X"){
for (w = 0; w < cube3d.length; w++){
    y = cube3d[w][1];
    z = cube3d[w][2];
cube3d[w][1] = y * Math.cos(radians) - z * Math.sin(radians);
cube3d[w][2] = y * Math.sin(radians) + z * Math.cos(radians);
canvas.clearRect(0, 0, canvas_element_1.width, canvas_element_1.height);}
}

if (v == "Y"){
for (w = 0; w < cube3d.length; w++){
    x = cube3d[w][0];
    z = cube3d[w][2]
cube3d[w][0] = Math.cos(radians)*x - Math.sin(radians)*z;
cube3d[w][2] = Math.sin(radians)*x + Math.cos(radians)*z;
canvas.clearRect(0, 0, canvas_element_1.width, canvas_element_1.height);}}

}*/
      const canvas_element_1 = document.getElementById("canvas_1");
      canvas_element_1.width = window.innerHeight;
      canvas_element_1.height = window.innerHeight;
    const canvas = canvas_element_1.getContext('2d');
/*
function resetCube3d(){
cube3d = [
  [-0.5, -0.5, 0.5],
  [0.5, -0.5, 0.5],
  [0.5, -0.5, -0.5],
  [-0.5, -0.5, -0.5],
  [-0.5, 0.5, 0.5],
  [0.5, 0.5, 0.5],
  [0.5, 0.5, -0.5],
  [-0.5, 0.5, -0.5]
];}
 */     
function resetCube3d(){
cube3d = [
    [[-0.5,-0.5,0.5],[0.5,-0.5,0.5],[0.5,0.5,0.5]],
    [[-0.5,-0.5,0.5],[0.5,0.5,0.5],[-0.5,0.5,0.5]],
    [[0.5,-0.5,0.5],[0.5,-0.5,-0.5],[0.5,0.5,-0.5]],
    [[0.5,-0.5,0.5],[0.5,0.5,-0.5],[0.5,0.5,0.5]],
    [[0.5,-0.5,-0.5],[-0.5,-0.5,-0.5],[-0.5,0.5,-0.5]],
    [[0.5,-0.5,-0.5],[-0.5,0.5,-0.5],[0.5,0.5,-0.5]],
    [[-0.5,-0.5,-0.5],[-0.5,-0.5,0.5],[-0.5,0.5,0.5]],
    [[-0.5,-0.5,-0.5],[-0.5,0.5,0.5],[-0.5,0.5,-0.5]],
    [[-0.5,0.5,0.5],[0.5,0.5,0.5],[0.5,0.5,-0.5]],
    [[-0.5,0.5,0.5],[0.5,0.5,-0.5],[-0.5,0.5,-0.5]],
    [[0.5,-0.5,0.5],[-0.5,-0.5,-0.5],[0.5,-0.5,-0.5]],
    [[0.5,-0.5,0.5],[-0.5,-0.5, 0.5],[-0.5,-0.5,-0.5]]
];
}

      
      

      
      
      
      
      
/*
function resetCube3d(){
cube3d = [
  [1, 1, 2],
  [2, 1, 2],
  [2, 1, 1],
  [1, 1, 1],
  [1, 2, 2],
  [2, 2, 2],
  [2, 2, 1],
  [1, 2, 1]
];}
      */
fovy = 1;
fovx = 1;
directionX = 0;
directionY = 0;
cameraX = 0;
cameraY = 0;
cameraZ = 0;

resetCube3d();
renderCube2d();

radiansZ = 0;
radiansY = 0;
radiansX = 0;
minus = -1;

document.onkeydown = function(){
    if (event.key == "z"){
        if (minus != 1){radiansZ = radiansZ + 0.01;if (radiansZ >= Math.PI){radiansZ = radiansZ - Math.PI*2;}}
        else {radiansZ = radiansZ - 0.01;if (radiansZ <= Math.PI*-1){radiansZ = radiansZ + Math.PI*2;}}
       }
    if (event.key == "y"){
        if (minus != 1){radiansY = radiansY + 0.01;if (radiansY >= Math.PI){radiansY = radiansY - Math.PI*2;}}
        else {radiansY = radiansY - 0.01;if (radiansY <= Math.PI*-1){radiansY = radiansY + Math.PI*2;}}
       }
    if (event.key == "x"){
        if (minus != 1){radiansX = radiansX + 0.01;if (radiansX >= Math.PI){radiansX = radiansX - Math.PI*2;}}
        else {radiansX = radiansX - 0.01;if (radiansX <= Math.PI*-1){radiansX = radiansX + Math.PI*2;}}
       }
    if (event.key == "-"){
        minus = minus*-1;
    }
    if (event.key == " "){
        cameraY = cameraY + 0.1;
    }
    if (event.key == "Shift"){
        cameraY = cameraY - 0.1;
    }
    if (event.key == "w"){
        cameraZ = cameraZ + 0.1;
    }
    if (event.key == "s"){
        cameraZ = cameraZ - 0.1;
    }
    if (event.key == "d"){
        cameraX = cameraX + 0.1;
    }
    if (event.key == "a"){
        cameraX = cameraX - 0.1;
    }
    if (event.key == "ArrowUp"){
       directionX = directionX + 0.1; // dran arbeiten!
    }
    if (event.key == "ArrowDown"){
       directionX = directionX - 0.1;
    }
    if (event.key == "ArrowRight"){
       directionY = directionY + 0.1;
    }
    if (event.key == "ArrowLeft"){
       directionY = directionY - 0.1;
    }
rotate("X", radiansX);rotate("Y", radiansY);rotate("Z", radiansZ);
    renderCube2d();resetCube3d();} // geht resetCube3d() weg, wenn ich einfach nicht rotate(XYZ, radiansXYZ) sondern vorher radiansNeu = radiansAlt +/- 0.01 und dann rotate(XYZ, radiansNeuXYZ Differenz zu radiansAltXYZ) machen? Weil dann würden doch die schon gedrehten Punkte nur um die angeforderte Drehung gedreht werden und nicht immer um die schon vorhandene Drehung + 0.01, daher kommt auch das superschnelle Drehen ohne resetCube3d(). 
  </script>
</body>
</html>